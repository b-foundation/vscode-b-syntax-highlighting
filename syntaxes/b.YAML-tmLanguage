name: B
scopeName: source.b
foldingStartMarker: '(\{|\()'
foldingEndMarker: '(\}|\))'
fileTypes:
- b

patterns:
- include: '#code'

repository:
  code:
    patterns:
    - include: '#comments'
    - include: '#constants'
    - include: '#operators'
    - include: '#strings'
    - include: '#keywords'
    - include: '#scope'
    - include: '#functions'
    - include: '#variables'

  comments:
    patterns:
    - name: comment.block.empty.b
      match: '/\*\*/'
      captures:
        '0': { name: punctuation.definition.comment.b }
    - name: comment.block.b
      begin: '/\*'
      captures:
        '0': { name: punctuation.definition.comment.b }
      end: '\*/'

  constants:
    patterns:
    - name: constant.numeric.b
      match: '\b(?<![\.0-9])([0-9]+)(?![\.0-9])\b'

  operators:
    patterns:
    - name: keyword.operator.logical.b
      match: '!(?!=)'
    - name: keyword.operator.bitwise.b
      match: '<<|>>|&|\|'
    - name: keyword.operator.relational.b
      match: '<=|>=|<|>'
    - name: keyword.operator.comparison.b
      match: '==|!='
    - name: keyword.operator.arithmetic.b
      match: '--|\+\+|(?<!/)\*\*|(?<!\*)/(?!/|\*)|%|\*(?<!/\*)(?!/([^\*]|$))|\+|-'
    - name: keyword.operator.assignment.b
      match: '(=>|(=(?!(=))))'
    -
      comment: 'keyword.operator.ternary.b'
      begin: '\?'
      beginCaptures:
        '1':
        - name: keyword.operator.ternary.b
      end: '\:'
      endCaptures:
        '1':
        - name: keyword.operator.ternary.b
      patterns:
      - include: '#comments'
      - include: '#constants'
      - include: '#operators'
      - include: '#strings'
      - include: '#functions'
      - include: '#variables'

  strings:
    patterns:
    - name: string.quoted.double.b
      begin: '"'
      end: '"'
      patterns:
      - name: constant.character.escape.b
        match: '(\*[0net\(\)\*\"\''])|(\%[scdo])'
    - name: string.quoted.single.b
      begin: ''''
      end: ''''
      patterns:
      - name: constant.character.escape.b
        match: '(\*[0net\(\)\*\"\''])|(\%[scdo])'

  keywords:
    patterns:
      - name: keyword.b
        match: '(?<=^|[\s\{\}\;\:]|\*\/)(goto|if|else|switch|case|default|break|while|return)\b'

  scope:
    patterns:
    - name: storage.type.primitive.b
      match: '(?<=^|[^@\w\.])(extrn|auto)\b'
    - name: entity.name.type.b
      match: '\b([A-Z]+\w*)\b'

  functions:
    patterns:
    - name: entity.name.function.b
      match: '(?<![\)\@\.\$\#\`\"''\]\\\~\^\w])([_A-Za-z]\w*)(?=\s*\()'

  variables:
    patterns:
    - name: variable.other.b
      match: '\b([_a-z]+\w*)\b'
